package model.user;

import java.util.Objects;
import java.util.regex.Pattern;

public abstract class Human {
    private int id; // Auto-generated by DB, no setter allowed after set
    private String name;
    private String email;
    private String phone;

    private static final Pattern EMAIL_PATTERN = Pattern.compile(
        "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$",
        Pattern.CASE_INSENSITIVE
    );

    public Human(String name, String email, String phone) {
        setName(name);
        setEmail(email);
        setPhone(phone);
    }

    public int getId() { return id; }

    public void setId(int id) {
        if (this.id != 0) throw new IllegalStateException("ID already set");
        if (id <= 0) throw new IllegalArgumentException("Invalid ID");
        this.id = id;
    }

    public String getName() { return name; }
    public String getEmail() { return email; }
    public String getPhone() { return phone; }

    public void setName(String name) {
        if (name == null || name.trim().isEmpty())
            throw new IllegalArgumentException("Name cannot be empty");
        this.name = name.trim();
    }

    public void setEmail(String email) {
        if (email == null || !EMAIL_PATTERN.matcher(email).matches())
            throw new IllegalArgumentException("Invalid email format");
        this.email = email;
    }

    public void setPhone(String phone) {
        if (phone == null)
            throw new IllegalArgumentException("Phone number cannot be null");
        String cleaned = phone.replaceAll("[^0-9]", "");
        if (cleaned.length() < 9)
            throw new IllegalArgumentException("Phone must contain at least 9 digits");
        this.phone = cleaned;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Human)) return false;
        Human human = (Human) o;
        return id == human.id;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        return "Human{" +
            "id=" + id +
            ", name='" + name + '\'' +
            ", email='" + email + '\'' +
            ", phone='" + phone + '\'' +
            '}';
    }
}
